import Head from "next/head";
import { firestore } from "../firebase/clientApp";
import {
  collection,
  QueryDocumentSnapshot,
  DocumentData,
  query,
  where,
  limit,
  getDocs,
} from "@firebase/firestore";
import { useEffect, useState } from "react";
import Button from "@mui/material/Button";
import Layout from "../components/Layout";
import CustomerList from "../components/CustomerList";
import {
  Box,
  FormControl,
  Input,
  InputAdornment,
  TextField,
} from "@mui/material";
import { Search } from "@mui/icons-material";
import Loading from "../components/Loading";

const todosCollection = collection(firestore, "todos");

export default function Home({ result }) {
  const [search, setSearch] = useState("");

  const getTodos = async () => {
    // construct a query to get up to 10 undone todos
    const todosQuery = query(
      todosCollection,
      where("done", "==", false),
      limit(10)
    );
    // get the todos
    const querySnapshot = await getDocs(todosCollection);

    const result = [];
    querySnapshot.docs.forEach((snapshot) => {
      result.push({ ...snapshot.data(), id: snapshot.id });
    });
    // set it to state
    setTodos(result);
  };
  useEffect(() => {
    console.log(result);
  }, []);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        
        <TextField
          className="mt-7 mb-4"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          fullWidth
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Search />
              </InputAdornment>
            ),
          }}
        />
        <CustomerList filter={search} />
        <Loading/>
      </div>
    </div>
  );
}

export const getServerSideProps = async () => {
  const todosQuery = query(
    todosCollection,
    where("done", "==", false),
    limit(10)
  );
  // get the todos
  const querySnapshot = await getDocs(todosQuery);

  const result = [];
  querySnapshot.docs.forEach((snapshot) => {
    result.push({ ...snapshot.data(), id: snapshot.id });
  });

  return {
    props: { result },
  };
};
